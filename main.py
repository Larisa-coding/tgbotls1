import asyncio
import random
import aiohttp
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile
from gtts import gTTS
from googletrans import Translator
from config import TOKEN, WEATHER_API_KEY
import keyboards as kb


bot = Bot(token=TOKEN)
dp = Dispatcher()

os.makedirs("tmp", exist_ok=True)
os.makedirs("img", exist_ok=True)

translator = Translator()

@dp.message(F.text == "–ü—Ä–∏–≤–µ—Ç")
async def hello_handler(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! ‚ú®")

@dp.message(F.text == "–ü–æ–∫–∞")
async def bye_handler(message: Message):
    await message.answer(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {message.from_user.first_name}! üëã")

@dp.message(Command("links"))
async def links_command(message: Message):
    await message.answer("–°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã:", reply_markup=kb.links)

@dp.message(Command("dynamic"))
async def dynamic_command(message: Message):
    await message.answer("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=kb.dynamic_keyboard())

@dp.callback_query(F.data == "show_more")
async def show_more_handler(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=kb.dynamic_keyboard(show_more=True))
    await callback.answer()

@dp.callback_query(F.data.startswith("option_"))
async def option_handler(callback: types.CallbackQuery):
    option = callback.data.split("_")[1]
    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è {option} ‚úÖ")
    await callback.answer()

@dp.message(Command('video'))
async def video(message: Message):
    try:
        await bot.send_chat_action(message.chat.id, 'upload_video')
        video = FSInputFile('video.mp4')
        await bot.send_video(message.chat.id, video)
    except FileNotFoundError:
        await message.answer("–í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}")

@dp.message(Command('voice'))
async def voice(message: Message):
    try:
        voice_file = FSInputFile("sample.ogg")
        await bot.send_voice(message.chat.id, voice_file)
    except FileNotFoundError:
        await message.answer("–ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command('audio'))
async def audio(message: Message):
    try:
        audio_file = FSInputFile('sound2.mp3')
        await bot.send_audio(message.chat.id, audio_file)
    except FileNotFoundError:
        await message.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command('training'))
async def training(message: Message):
    training_list = [
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1:\n1. –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è: 3x15\n2. –í–µ–ª–æ—Å–∏–ø–µ–¥: 3x20\n3. –ü–ª–∞–Ω–∫–∞: 3x30 —Å–µ–∫",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 2:\n1. –ü–æ–¥—ä–µ–º—ã –Ω–æ–≥: 3x15\n2. –†—É—Å—Å–∫–∏–π —Ç–≤–∏—Å—Ç: 3x20\n3. –ü–ª–∞–Ω–∫–∞ —Å –Ω–æ–≥–æ–π: 3x20 —Å–µ–∫",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 3:\n1. –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è —Å –Ω–æ–≥–∞–º–∏: 3x15\n2. –ù–æ–∂–Ω–∏—Ü—ã: 3x20\n3. –ë–æ–∫–æ–≤–∞—è –ø–ª–∞–Ω–∫–∞: 3x20 —Å–µ–∫"
    ]

    rand_tr = random.choice(training_list)
    await message.answer(f"üèãÔ∏è –í–∞—à–∞ –º–∏–Ω–∏-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{rand_tr}")

    try:
        tts = gTTS(text=rand_tr, lang='ru')
        filename = "tmp/training.ogg"
        tts.save(filename)
        await bot.send_voice(chat_id=message.chat.id, voice=FSInputFile(filename))
        os.remove(filename)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {str(e)}")

@dp.message(Command('help'))
async def help_command(message: Message):
    help_text = (
        "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/photo - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ\n"
        "/weather [–≥–æ—Ä–æ–¥] - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "/training - –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –æ–∑–≤—É—á–∫–æ–π\n"
        "/voice - –ü–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/doc - –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç\n"
        "/video - –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ\n"
        "/audio - –ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª\n"
        "/links - –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n"
        "/dynamic - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é\n"
    )
    await message.answer(help_text)

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! ‚ú®', reply_markup=kb.main)

async def main():
    await dp.start_polling(bot)

@dp.message(Command('doc'))
async def doc(message: Message):
    try:
        document = FSInputFile("Krug.pdf")
        await bot.send_document(message.chat.id, document)
    except FileNotFoundError:
        await message.answer("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

async def get_weather(city: str) -> str:
    base_url = "http://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city,
        "appid": WEATHER_API_KEY,
        "units": "metric",
        "lang": "ru"
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(base_url, params=params) as response:
            if response.status != 200:
                return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå"

            data = await response.json()
            weather = data["weather"][0]["description"].capitalize()
            temp = data["main"]["temp"]
            humidity = data["main"]["humidity"]
            wind = data["wind"]["speed"]

            return (
                f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                f"‚ûñ {weather}\n"
                f"üå° {temp}¬∞C\n"
                f"üíß {humidity}%\n"
                f"üå™ {wind} –º/—Å"
            )

@dp.message(Command("weather"))
async def weather_command(message: Message):
    try:
        city = message.text.split(maxsplit=1)[1]
        weather = await get_weather(city)
        await message.answer(weather)
    except IndexError:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /weather.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command('photo'))
async def photo(message: Message):
    image_links = [
        'https://i.pinimg.com/236x/c8/cc/24/c8cc24bba37a25c009647b8875aae0e3.jpg',
        'https://img.freepik.com/free-photo/nature-animals_1122-1999.jpg',
        'https://img.freepik.com/free-photo/cute-cat-spending-time-indoors_23-2150649172.jpg'
    ]
    await message.answer_photo(photo=random.choice(image_links), caption='–í–æ—Ç –≤–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞!')

@dp.message(F.text)
async def translate_text(message: Message):
    try:
        translated = await translator.translate(message.text, dest='en')
        await message.answer(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {translated.text}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")



if __name__ == "__main__":
    asyncio.run(main())
